from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from services.db import (
    toggle_item_received, order_with_items, all_items_received, close_followup,
    get_due_followups, mark_followup_sent
)

router = Router()

# ---------- —É—Ç–∏–ª–∏—Ç—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è ----------
def followup_text(order, items):
    lines = [f"üì¶ –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∑–∞—è–≤–∫–µ #{order['id']} –æ—Ç {order['created_at']}:"]
    for it in items:
        mark = "‚úÖ" if it["received"] else "‚è≥"
        lines.append(f"{mark} {it['title']} √ó {it['qty']}")
    lines.append("\n–ù–∞–∂–∏–º–∞–π—Ç–µ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ.")
    return "\n".join(lines)

def followup_kb(items, order_id: int):
    kb = InlineKeyboardBuilder()
    for it in items:
        text = ("‚úÖ " if it["received"] else "‚è≥ ") + it["title"]
        kb.button(text=text, callback_data=f"fu:toggle:{order_id}:{it['id']}")
    kb.button(text="–í—Å–µ –ø–æ–ª—É—á–µ–Ω–æ", callback_data=f"fu:done:{order_id}")
    kb.adjust(1)
    return kb.as_markup()

# ---------- –∫–æ–ª–ª–±—ç–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----------
@router.callback_query(F.data.startswith("fu:toggle:"))
async def fu_toggle(c: CallbackQuery):
    _, _, order_id, item_id = c.data.split(":")
    toggle_item_received(int(item_id))
    order, items = order_with_items(int(order_id))
    await c.message.edit_text(
        followup_text(order, items),
        reply_markup=followup_kb(items, int(order_id)),
    )
    await c.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")

@router.callback_query(F.data.startswith("fu:done:"))
async def fu_done(c: CallbackQuery):
    order_id = int(c.data.split(":")[2])
    if all_items_received(order_id):
        close_followup(order_id)
        await c.message.edit_text("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã. –ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞–∫—Ä—ã—Ç.")
    else:
        await c.answer("–ï—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ ¬´‚è≥¬ª. –û—Ç–º–µ—Ç—å—Ç–µ –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ.", show_alert=True)

# ---------- –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ–ª–ª–æ—É–∞–ø–∞ –∏ –≤–æ—Ä–∫–µ—Ä ----------
async def send_followup(bot: Bot, fu_row):
    # fu_row ‚Äî sqlite3.Row (dict-like)
    order_id = fu_row["order_id"]
    chat_id = fu_row["chat_id"]
    order, items = order_with_items(order_id)
    if not order or not items:
        close_followup(order_id)
        return
    msg = await bot.send_message(chat_id, followup_text(order, items), reply_markup=followup_kb(items, order_id))
    mark_followup_sent(fu_row["id"], chat_id, msg.message_id)

async def followup_worker(bot: Bot):
    import asyncio, logging
    logging.info("followup_worker started")
    while True:
        try:
            due = get_due_followups()
            if due:
                logging.info("followup_worker: %d task(s) due", len(due))
            for fu in due:
                await send_followup(bot, fu)
        except Exception as e:
            logging.exception("followup_worker error: %s", e)
        await asyncio.sleep(10)  # –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ 10 –¥–ª—è —Ç–µ—Å—Ç–∞