from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from states.cart_states import CartStates
from services.db import get_db
from collections import defaultdict
import asyncio
from config import ADMIN_ID
# üëâ –≤—ã–Ω–µ—Å–∏ –≤ config.py –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –æ—Ç—Ç—É–¥–∞

router = Router()

@router.callback_query(F.data.startswith("item_"))
async def handle_item_click(callback: CallbackQuery, state: FSMContext):
    data = callback.data.replace("item_", "")
    parts = data.split(":")
    item_id = int(parts[0])
    category_id = int(parts[1])
    parent_id = int(parts[2]) if len(parts) > 2 else 0
    grand_parent_id = int(parts[3]) if len(parts) > 3 else 0

    db = await get_db()
    cursor = await db.execute("SELECT name FROM items WHERE id = ?", (item_id,))
    row = await cursor.fetchone()
    await db.close()

    if not row:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    item_name = row[0]

    await state.update_data(
        item_id=item_id,
        item_name=item_name,
        category_id=category_id,
        parent_id=parent_id,
        grand_parent_id=grand_parent_id,
        message_id=callback.message.message_id
    )
    await state.set_state(CartStates.awaiting_quantity)

    await callback.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: <b>{item_name}</b>",
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(CartStates.awaiting_quantity)
async def process_quantity(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.delete()
        return

    data = await state.get_data()
    item_id = data["item_id"]
    item_name = data["item_name"]
    category_id = data["category_id"]
    parent_id = data["parent_id"]
    grand_parent_id = data["grand_parent_id"]
    msg_id = data["message_id"]

    quantity = int(message.text)
    user_id = message.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    db = await get_db()
    await db.execute("""
        INSERT INTO cart (user_id, item_id, quantity)
        VALUES (?, ?, ?)
        ON CONFLICT(user_id, item_id) DO UPDATE SET quantity = quantity + excluded.quantity
    """, (user_id, item_id, quantity))
    await db.commit()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã
    subcats = await db.execute("SELECT id, name FROM categories WHERE parent_id = ?", (category_id,))
    subcats = await subcats.fetchall()

    items = await db.execute("SELECT id, name FROM items WHERE category_id = ?", (category_id,))
    items = await items.fetchall()
    await db.close()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
    buttons = []

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for cid, name in subcats:
        buttons.append([
            InlineKeyboardButton(
                text=name,
                callback_data=f"cat_{cid}:{category_id}:{parent_id}"
            )
        ])

    # –ü–æ—Ç–æ–º —Ç–æ–≤–∞—Ä—ã
    for iid, name in items:
        buttons.append([
            InlineKeyboardButton(
                text=name,
                callback_data=f"item_{iid}:{category_id}:{parent_id}:{grand_parent_id}"
            )
        ])

    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ (–µ—Å–ª–∏ –Ω–µ –∫–æ—Ä–µ–Ω—å)
    if parent_id or grand_parent_id:
        buttons.append([
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data=f"cat_{parent_id}:{grand_parent_id}:0"
            )
        ])

    # –ö–Ω–æ–ø–∫–∏ –ö–æ—Ä–∑–∏–Ω–∞ –∏ –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –Ω–∞ –æ–¥–Ω–æ–π –ª–∏–Ω–∏–∏
    buttons.append([
        InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart"),
        InlineKeyboardButton(text="üî• –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ", callback_data="popular"),
        InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è", callback_data="history_orders")
    ])

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=msg_id,
        text="üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    notify_msg = await message.bot.send_message(
        chat_id=message.chat.id,
        text=f"‚úÖ <b>{item_name}</b> ‚Äî {quantity} —à—Ç. –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.",
        parse_mode="HTML"
    )

    await message.delete()

    await asyncio.sleep(2)
    try:
        await notify_msg.delete()
    except:
        pass

    await state.clear()

# ‚úÖ –≤—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ (–≤–µ—Ä–Ω–∞—è state + –ø–µ—Ä–µ–Ω–æ—Å –≤ orders)
@router.callback_query(CartStates.choosing_company, F.data.startswith("company_"))
async def handle_company_selection(callback: CallbackQuery, state: FSMContext):
    company_name = callback.data.replace("company_", "")
    user_id = callback.from_user.id

    db = await get_db()

    # —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
    cur = await db.execute("""
        SELECT i.id, i.name, c.quantity, i.supplier
        FROM cart c
        JOIN items i ON c.item_id = i.id
        WHERE c.user_id = ?
    """, (user_id,))
    rows = await cur.fetchall()

    if not rows:
        await db.close()
        await state.clear()
        await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        await callback.answer()
        return

    # –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
    grouped = defaultdict(list)
    for item_id, item_name, qty, supplier in rows:
        grouped[(supplier or "‚ùì –ë–µ–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")].append(f"{item_name} ‚Äî {qty} —à—Ç.")

    text = (
        f"üßë‚Äçüíº–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç <b><code>{user_id}</code></b>\n"
        f"üì¶<b>–û–û–û {company_name}</b>\n\n"
    )
    for supplier, goods in grouped.items():
        text += f"<b>{supplier}</b>:\n" + "\n".join(f"‚ñ™Ô∏è {g}" for g in goods) + "\n\n"

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –û–î–ò–ù —Ä–∞–∑
    await callback.bot.send_message(chat_id=ADMIN_ID, text=text, parse_mode="HTML")

    # üëâ –ø–µ—Ä–µ–Ω–æ—Å –ø–æ–∑–∏—Ü–∏–π –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ (orders)
    await db.execute("""
        INSERT INTO orders(user_id, item_id, quantity)
        SELECT c.user_id, c.item_id, c.quantity
        FROM cart c
        WHERE c.user_id = ?
    """, (user_id,))
    await db.commit()

    # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    cur = await db.execute(
        "SELECT COUNT(*) FROM orders WHERE user_id = ? AND DATE(order_date)=DATE('now')",
        (user_id,)
    )
    print("orders inserted today for", user_id, "=", (await cur.fetchone())[0])

    # —á–∏—Å—Ç–∏–º –∫–æ—Ä–∑–∏–Ω—É
    await db.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
    await db.commit()
    await db.close()

    await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    await state.clear()
    await callback.answer()


# ‚ùå –£–î–ê–õ–ò/–ó–ê–ö–û–ú–ú–ï–ù–¢–¨ –≠–¢–û–¢ –•–ï–ù–î–õ–ï–† (–æ–Ω –ª–æ–º–∞–ª –≤—Å—ë, JOIN suppliers –Ω–µ –Ω—É–∂–µ–Ω)
# @router.callback_query(F.data.startswith("choose_company_"))
# async def handle_company_choice(...):
#     ...



@router.callback_query(F.data == "submit_cart")
async def submit_cart(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–û–û ¬´–ê–ù–ò–ö–û¬ª", callback_data="company_–ê–ù–ò–ö–û")],
        [InlineKeyboardButton(text="–û–û–û ¬´–°–§–ï–†–ê¬ª", callback_data="company_–°–§–ï–†–ê")],
        [InlineKeyboardButton(text="–û–û–û ¬´–ö–ï–õ–¨–¢¬ª", callback_data="company_–ö–ï–õ–¨–¢")],
        [InlineKeyboardButton(text="–û–û–û ¬´–ü–†–ò–í–ò–õ–ï–ì–ò–Ø¬ª", callback_data="company_–ü–†–ò–í–ò–õ–ï–ì–ò–Ø")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])

    # üëá –∏–º–µ–Ω–Ω–æ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(CartStates.choosing_company)

    await callback.message.edit_text(
        "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–π –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –∑–∞—è–≤–∫–∞:",
        reply_markup=keyboard
    )
    await callback.answer()