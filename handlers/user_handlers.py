from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from services.db import get_db
from aiogram.fsm.context import FSMContext

router = Router()

async def _build_root_menu():
    db = await get_db()
    # –∫–æ—Ä–µ–Ω—å: parent_id = 0 –ò–õ–ò name='catalog'
    cur = await db.execute("SELECT id FROM categories WHERE parent_id = 0 ORDER BY id LIMIT 1")
    row = await cur.fetchone()
    if not row:
        cur = await db.execute("SELECT id FROM categories WHERE LOWER(name)='catalog' ORDER BY id LIMIT 1")
        row = await cur.fetchone()
    if not row:
        await db.close()
        return None

    root_id = row[0]
    cur = await db.execute("SELECT id, name FROM categories WHERE parent_id = ?", (root_id,))
    cats = await cur.fetchall()
    await db.close()

    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"cat_{cid}:{root_id}:0")]
        for cid, name in cats
    ]

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    buttons.append([
        InlineKeyboardButton(text="üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="history_orders"),
        InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(F.text == "/s")
async def open_catalog(message: Message):
    kb = await _build_root_menu()
    if not kb:
        await message.answer("‚ùå –ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    await message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    kb = await _build_root_menu()
    if not kb:
        await callback.message.edit_text("‚ùå –ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return
    await callback.message.edit_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data == "popular")
async def show_popular(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.answer()  # —Å—Ä–∞–∑—É –≥–∞—Å–∏–º "–∫—Ä—É—Ç–∏–ª–∫—É"

    try:
        db = await get_db()
        # –ë–µ—Ä–µ–º –¢–û–ü-8 –ø–æ —Å—É–º–º–µ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        cursor = await db.execute("""
            SELECT i.id, i.name, i.category_id, SUM(o.quantity) AS total_qty
            FROM orders o
            JOIN items i ON i.id = o.item_id
            WHERE o.user_id = ?
            GROUP BY i.id, i.name, i.category_id
            ORDER BY total_qty DESC
            LIMIT 8
        """, (user_id,))
        rows = await cursor.fetchall()
        await db.close()

        if not rows:
            await callback.message.edit_text(
                "üî• –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –ø—É—Å—Ç–æ.\n–°–¥–µ–ª–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ ‚Äî –∏ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –≤–∞—à–∏ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏."
            )
            return

        # –ö–Ω–æ–ø–∫–∏: –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        buttons = [
            [InlineKeyboardButton(
                text=f"{name} ‚Ä¢ {total_qty}",
                callback_data=f"item_{item_id}:{cat_id}:0:0"   # –≤–µ—Ä–Ω–µ–º—Å—è –≤ —Ç–æ–≤–∞—Ä –Ω–∞–ø—Ä—è–º—É—é
            )]
            for (item_id, name, cat_id, total_qty) in rows
        ]

        # –ù–∏–∑: –Ω–∞–∑–∞–¥ –∏ –∫–æ—Ä–∑–∏–Ω–∞ –≤ –û–î–ù–û–ô —Å—Ç—Ä–æ–∫–µ
        buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"),
            InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart"),
        ])

        await callback.message.edit_text(
            "üî• –í–∞—à–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ (—Ç–æ–ø-8):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )

    except Exception as e:
        # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–∞–¥–∞–µ—Ç
        print("POPULAR ERROR:", repr(e))
        try:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass