from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from services.db import get_db
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from states.cart_states import CartStates
from aiogram.exceptions import TelegramBadRequest
from collections import defaultdict
from aiogram import Bot
from filters import access

router = Router()

@router.message(F.text.lower() == "–∫–æ—Ä–∑–∏–Ω–∞")
async def view_cart(message: Message):
    db = await get_db()
    cursor = await db.execute(
        """
        SELECT items.name, cart.quantity, items.price
        FROM cart
        JOIN items ON cart.item_id = items.id
        WHERE cart.user_id = ?
        """, (message.from_user.id,)
    )
    items = await cursor.fetchall()
    await cursor.close()
    await db.close()

    if not items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total = 0
    for name, qty, price in items:
        subtotal = qty * price
        total += subtotal
        parse_mode="HTML"
        text += f"üîπ {name} ‚Äî {qty} —à—Ç. √ó {price} = <b>{subtotal}</b>\n"

    text += f"\n<b>–ò—Ç–æ–≥–æ: {total}</b>"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="submit_order")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")]
    ])

    await message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: Message):
    db = await get_db()
    await db.execute("DELETE FROM cart WHERE user_id = ?", (callback.from_user.id,))
    await db.commit()
    await db.close()
    await callback.message.edit_text("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    await callback.answer()

@router.callback_query(F.data == "submit_order")
async def submit_order(callback: Message):
    db = await get_db()
    cursor = await db.execute(
        """
        SELECT items.name, cart.quantity
        FROM cart
        JOIN items ON cart.item_id = items.id
        WHERE cart.user_id = ?
        """, (callback.from_user.id,)
    )
    items = await cursor.fetchall()
    await cursor.close()
    await db.execute("DELETE FROM cart WHERE user_id = ?", (callback.from_user.id,))
    await db.commit()
    await db.close()

    if not items:
        await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        await callback.answer()
        return

    text = f"<b>üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{callback.from_user.username or callback.from_user.id}:</b>"
    parse_mode = "HTML"
    for name, qty in items:
        text += f"üîπ {name} ‚Äî {qty} —à—Ç."

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É (–∑–¥–µ—Å—å ID –∞–¥–º–∏–Ω–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    admin_id = 1297005050
    await callback.bot.send_message(chat_id=admin_id, text=text)

    await callback.message.edit_text("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    await callback.answer()

@router.callback_query(F.data == "view_cart")
async def view_cart(callback: CallbackQuery, state: FSMContext):
    db = await get_db()
    cursor = await db.execute("""
        SELECT items.id, items.name, cart.quantity
        FROM cart
        JOIN items ON cart.item_id = items.id
        WHERE cart.user_id = ?
    """, (callback.from_user.id,))
    items = await cursor.fetchall()
    await db.close()

    if not items:
        await callback.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        await callback.answer()
        return

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã
    text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    parse_mode = "HTML"
    for _, name, qty in items:
        text += f"üîπ {name} ‚Äî {qty} —à—Ç.\n"

    keyboard_buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_mode")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="remove_mode")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="submit_cart")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.message(CartStates.editing_quantity)
async def update_quantity(message: Message, state: FSMContext):
    try:
        await message.delete()
    except:
        pass  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ ‚Äî –Ω–µ –ø–∞–¥–∞–µ–º

    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    item_id = data.get("edit_item_id")
    msg_id = data.get("message_id")
    quantity = int(message.text)
    user_id = message.from_user.id

    print(f"üü° USER: {user_id}, ITEM: {item_id}, QTY: {quantity}, MSG_ID: {msg_id}")

    db = await get_db()
    print("üü¢ DB connected")

    await db.execute(
        "UPDATE cart SET quantity = ? WHERE user_id = ? AND item_id = ?",
        (quantity, user_id, item_id)
    )

    cursor = await db.execute("""
        SELECT items.id, items.name, cart.quantity
        FROM cart
        JOIN items ON cart.item_id = items.id
        WHERE cart.user_id = ?
    """, (user_id,))
    items = await cursor.fetchall()
    await db.commit()
    await db.close()

    if not items:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=msg_id,
                text="üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
                parse_mode="HTML"
            )

            msg = await message.bot.send_message(
                chat_id=message.chat.id,
                text=f"‚úÖ –ü–æ–∑–∏—Ü–∏—è <b>{item_name}</b> —É–¥–∞–ª–µ–Ω–∞, –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
                parse_mode="HTML"
            )
            await asyncio.sleep(2)
            await msg.delete()

        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise

        await state.clear()
        return


    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart_text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    for iid, name, qty in items:
        cart_text += f"üîπ {name} ‚Äî {qty} —à—Ç.\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_mode")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="remove_mode")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="submit_cart")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=msg_id,
            text=cart_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        db = await get_db()
        cursor = await db.execute("SELECT name FROM items WHERE id = ?", (item_id,))
        row = await cursor.fetchone()
        await db.close()
        item_name = row[0] if row else "—Ç–æ–≤–∞—Ä"
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è:", e)
        item_name = "—Ç–æ–≤–∞—Ä"

    cart_text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    for iid, name, qty in items:
        cart_text += f"üîπ {name} ‚Äî {qty} —à—Ç.\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_mode")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="remove_mode")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="submit_cart")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=msg_id,
            text=cart_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        else:
            raise

    await state.clear()

@router.callback_query(F.data.startswith("edititem_"))
async def ask_new_quantity(callback: CallbackQuery, state: FSMContext):
    item_id = int(callback.data.replace("edititem_", ""))

    db = await get_db()
    cursor = await db.execute("SELECT name FROM items WHERE id = ?", (item_id,))
    row = await cursor.fetchone()
    await db.close()

    if not row:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    name = row[0]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(edit_item_id=item_id, message_id=callback.message.message_id)
    await state.set_state(CartStates.editing_quantity)

    # ‚ùóÔ∏è –û–ë–ù–û–í–õ–Ø–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    db = await get_db()
    cursor = await db.execute(
        "SELECT items.name, cart.quantity FROM cart JOIN items ON cart.item_id = items.id WHERE cart.item_id = ? AND cart.user_id = ?",
        (item_id, callback.from_user.id)
    )
    row = await cursor.fetchone()
    await db.close()

    if not row:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    name, qty = row

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(edit_item_id=item_id, message_id=callback.message.message_id)
    await state.set_state(CartStates.editing_quantity)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    await callback.message.edit_text(
        text=f"‚úèÔ∏è <b>{name}</b>\n–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{qty}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ:",
        parse_mode="HTML"
    )

    await callback.answer()

    await callback.answer()

@router.callback_query(F.data == "edit_mode")
async def choose_item_to_edit(callback: CallbackQuery, state: FSMContext):
    db = await get_db()
    cursor = await db.execute("""
        SELECT items.id, items.name
        FROM cart
        JOIN items ON cart.item_id = items.id
        WHERE cart.user_id = ?
    """, (callback.from_user.id,))
    items = await cursor.fetchall()
    await db.close()

    if not items:
        await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"edititem_{iid}")]
        for iid, name in items
    ])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("edititem_"))
async def ask_new_qty(callback: CallbackQuery, state: FSMContext):
    item_id = int(callback.data.replace("edititem_", ""))
    await state.update_data(edit_item_id=item_id, message_id=callback.message.message_id)
    await state.set_state(CartStates.editing_quantity)

    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await callback.answer()


@router.callback_query(F.data.startswith("removeitem_"))
async def remove_selected_item(callback: CallbackQuery):
    item_id = int(callback.data.replace("removeitem_", ""))
    user_id = callback.from_user.id

    db = await get_db()
    # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    await db.execute("DELETE FROM cart WHERE user_id = ? AND item_id = ?", (user_id, item_id))
    await db.commit()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    cursor = await db.execute("""
        SELECT items.id, items.name, cart.quantity
        FROM cart
        JOIN items ON cart.item_id = items.id
        WHERE cart.user_id = ?
    """, (user_id,))
    items = await cursor.fetchall()
    await db.close()

    if not items:
        await callback.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã
    text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    for iid, name, qty in items:
        text += f"üîπ {name} ‚Äî {qty} —à—Ç.\n"

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_mode")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="remove_mode")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="submit_cart")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.")

@router.callback_query(F.data == "remove_mode")
async def choose_item_to_remove(callback: CallbackQuery):
    db = await get_db()
    cursor = await db.execute("""
        SELECT items.id, items.name
        FROM cart
        JOIN items ON cart.item_id = items.id
        WHERE cart.user_id = ?
    """, (callback.from_user.id,))
    items = await cursor.fetchall()
    await db.close()

    if not items:
        await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"removeitem_{iid}")]
        for iid, name in items
    ])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å

    db = await get_db()

    # –∏—â–µ–º –∫–æ—Ä–µ–Ω—å (parent_id = 0 –∏–ª–∏ –∏–º—è 'catalog')
    cur = await db.execute("""
        SELECT id FROM categories
        WHERE parent_id = 0
        ORDER BY id LIMIT 1
    """)
    root = await cur.fetchone()
    if not root:
        cur = await db.execute("""
            SELECT id FROM categories
            WHERE LOWER(name) = 'catalog'
            ORDER BY id LIMIT 1
        """)
        root = await cur.fetchone()

    if not root:
        await db.close()
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        return

    root_id = root[0]

    # –¥–µ—Ç–∏ –∫–æ—Ä–Ω—è
    cur = await db.execute("""
        SELECT id, name FROM categories
        WHERE parent_id = ?
        ORDER BY id
    """, (root_id,))
    categories = await cur.fetchall()
    await db.close()

    if not categories:
        await callback.message.edit_text("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
        await callback.answer()
        return

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π + —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    rows = [
        [InlineKeyboardButton(text=name, callback_data=f"cat_{cid}:{root_id}:0")]
        for cid, name in categories
    ]
    # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ
    rows.append([
        InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart"),
        InlineKeyboardButton(text="üî• –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ", callback_data="history_orders"),
        InlineKeyboardButton(text="üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="history_orders")
    ])
    # –ù–∞ –∫–æ—Ä–Ω–µ –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª –Ω–µ—Ç ‚Äî —ç—Ç–æ –∏ –Ω—É–∂–Ω–æ

    keyboard = InlineKeyboardMarkup(inline_keyboard=rows)

    await callback.message.edit_text(
        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )
    await callback.answer()

ADMIN_ID = 1297005050

async def send_order_to_admin(bot: Bot, user_id: int, company_name: str):
    db = await get_db()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor = await db.execute("""
        SELECT c.quantity, i.name, i.supplier
        FROM cart c
        JOIN items i ON c.item_id = i.id
        WHERE c.user_id = ?
    """, (user_id,))
    rows = await cursor.fetchall()

    if not rows:
        await db.close()
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
    grouped = defaultdict(list)
    for quantity, item_name, supplier in rows:
        supplier = supplier or "‚ùì –ë–µ–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
        grouped[supplier].append(f"{item_name} ‚Äî {quantity} —à—Ç.")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
    message = f"üßë‚Äçüíº –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç <b><code>{user_id}</code></b>\n"
    message += f"üè¢ <b>{'–û–û–û ' if not company_name.startswith('–û–û–û') else ''}{company_name}</b>\n\n"

    for supplier, items_list in grouped.items():
        message += f"<b>{supplier}</b>:\n"
        message += "\n".join(f"‚ñ™Ô∏è {item}" for item in items_list)
        message += "\n\n"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(
        chat_id=ADMIN_ID,  # –Ω–µ –∑–∞–±—É–¥—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å ID
        text=message,
        parse_mode="HTML"
    )

    # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    await db.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
    await db.commit()
    await db.close()

@router.callback_query(lambda c: c.data.startswith("company_"))
async def handle_company_choice(callback: CallbackQuery, state: FSMContext, bot):
    company_name = callback.data.split("company_")[1]
    user_id = callback.from_user.id

    await send_order_to_admin(bot, user_id=user_id, company_name=company_name)

    await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    await state.clear()
    await callback.answer()