import asyncio
import logging
from aiogram import Bot, Dispatcher
from handlers import user_handlers, catalog_handlers, cart_handlers, cart_view
from admin import admin_handlers
from pathlib import Path
from aiogram.fsm.storage.sqlite import SQLiteStorage


# ‚úÖ —ç—Ç–æ –≤–∞–∂–Ω–æ
from services.db import ensure_schema, abs_db_path
from dotenv import load_dotenv
import os

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0") or 0)
DB_PATH = os.getenv("DB_PATH", "shop_bot.db")
assert BOT_TOKEN, "BOT_TOKEN is empty (set it in .env)"
# üëá –¥–æ–±–∞–≤–ª—è–µ–º on_startup
async def on_startup(bot: Bot):
    print("Preparing DB at:", abs_db_path())
    await ensure_schema()  # —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã (orders –∏ —Ç.–¥.)

async def main():
    logging.basicConfig(level=logging.INFO)

    bot = Bot(token=BOT_TOKEN)  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å parse_mode, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # --- FSM –≤ —Ñ–∞–π–ª–µ —Ä—è–¥–æ–º —Å bot.py ---
    base_dir = Path(__file__).parent
    fsm_path = base_dir / "fsm.sqlite"
    storage = SQLiteStorage(path=str(fsm_path))
    dp = Dispatcher(storage=storage)

    # —Ö–µ–Ω–¥–ª–µ—Ä—ã
    dp.include_router(user_handlers.router)
    dp.include_router(admin_handlers.router)
    dp.include_router(catalog_handlers.router)
    dp.include_router(cart_handlers.router)
    dp.include_router(cart_view.router)

    # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö—É–∫
    dp.startup.register(on_startup)

    # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –∞–ø–¥–µ–π—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —Å –≤–µ–±—Ö—É–∫–∞ –Ω–∞ –ø—É–ª–ª–∏–Ω–≥
    await bot.delete_webhook(drop_pending_updates=False)

    # —É–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç long-polling ‚Äî —É—Å—Ç–æ–π—á–∏–≤–µ–µ –∫ –æ–±—Ä—ã–≤–∞–º
    await dp.start_polling(bot, polling_timeout=60)




if __name__ == "__main__":
    asyncio.run(main())
